{
    "status": "1",
    "message": "OK",
    "result": [
        {
            "SourceCode": "// This contract just saves in the blockchain the intention to withdraw dth\r\n// A Bot will execute this operation in the ETC blockchain and will save\r\n// the result back\r\ncontract Owned {\r\n    /// Prevents methods from perfoming any value transfer\r\n    modifier noEther() {if (msg.value > 0) throw; _}\r\n    /// Allows only the owner to call a function\r\n    modifier onlyOwner { if (msg.sender == owner) _ }\r\n\r\n    function Owned() { owner = msg.sender;}\r\n    address owner;\r\n\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function execute(address _dst, uint _value, bytes _data) onlyOwner {\r\n        _dst.call.value(_value)(_data);\r\n    }\r\n\r\n    function getOwner() noEther constant returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract CrossWhitehatWithdraw is Owned {\r\n    address bot;\r\n    uint price;\r\n\r\n    Operation[] public operations;\r\n\r\n    modifier onlyBot { if ((msg.sender == owner)||(msg.sender == bot)) _ }\r\n\r\n    struct Operation {\r\n        address dth;\r\n        address etcBeneficiary;\r\n        uint percentage;\r\n        uint queryTime;\r\n\r\n        uint answerTime;\r\n        uint result;\r\n        bytes32 dthTxHash;\r\n    }\r\n\r\n    function CrossWhitehatWithdraw(uint _price, address _bot) Owned() {\r\n        price = _price;\r\n        bot = _bot;\r\n    }\r\n\r\n    function withdraw(address _etcBeneficiary, uint _percentage) returns (uint) {\r\n        if (_percentage > 100) throw;\r\n        if (msg.value < price) throw;\r\n        Operation op = operations[operations.length ++];\r\n        op.dth = msg.sender;\r\n        op.etcBeneficiary = _etcBeneficiary;\r\n        op.percentage = _percentage;\r\n        op.queryTime = now;\r\n        Withdraw(op.dth, op.etcBeneficiary, op.percentage, operations.length -1);\r\n\r\n        return operations.length -1;\r\n    }\r\n\r\n    function setResult(uint _idOperation, uint _result, bytes32 _dthTxHash) onlyBot noEther {\r\n        Operation op = operations[_idOperation];\r\n        if (op.dth == 0) throw;\r\n        op.answerTime = now;\r\n        op.result = _result;\r\n        op.dthTxHash = _dthTxHash;\r\n        WithdrawResult(_idOperation, _dthTxHash, _result);\r\n    }\r\n\r\n    function setBot(address _bot) onlyOwner noEther  {\r\n        bot = _bot;\r\n    }\r\n\r\n    function getBot() noEther constant returns (address) {\r\n        return bot;\r\n    }\r\n\r\n    function setPrice(uint _price) onlyOwner noEther  {\r\n        price = _price;\r\n    }\r\n\r\n    function getPrice() noEther constant returns (uint) {\r\n        return price;\r\n    }\r\n\r\n    function getOperation(uint _idOperation) noEther constant returns (address dth,\r\n        address etcBeneficiary,\r\n        uint percentage,\r\n        uint queryTime,\r\n        uint answerTime,\r\n        uint result,\r\n        bytes32 dthTxHash)\r\n    {\r\n        Operation op = operations[_idOperation];\r\n        return (op.dth,\r\n                op.etcBeneficiary,\r\n                op.percentage,\r\n                op.queryTime,\r\n                op.answerTime,\r\n                op.result,\r\n                op.dthTxHash);\r\n    }\r\n\r\n    function getOperationsNumber() noEther constant returns (uint) {\r\n        return operations.length;\r\n    }\r\n\r\n    function() {\r\n        throw;\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n        uint i;\r\n        for (i=0; i<operations.length; i++) {\r\n            Operation op = operations[i];\r\n            op.dth =0;\r\n            op.etcBeneficiary =0;\r\n            op.percentage=0;\r\n            op.queryTime=0;\r\n            op.answerTime=0;\r\n            op.result=0;\r\n            op.dthTxHash=0;\r\n        }\r\n        operations.length=0;\r\n        bot=0;\r\n        price=0;\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    event Withdraw(address indexed dth, address indexed beneficiary, uint percentage, uint proposal);\r\n    event WithdrawResult(uint indexed proposal, bytes32 indexed hash, uint result);\r\n\r\n\r\n}",
            "ABI": "",
            "ContractName": "CrossWhitehatWithdraw",
            "CompilerVersion": "v0.3.6-2016-08-17-c499470",
            "CompilerType": "solc",
            "OptimizationUsed": "1",
            "Runs": "200",
            "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d8ed8470d104b300c3795f42441aee45460b0cb",
            "EVMVersion": "Default",
            "Library": "",
            "ContractFileName": "",
            "LicenseType": "",
            "Proxy": "0",
            "Implementation": "",
            "SwarmSource": "",
            "SimilarMatch": ""
        }
    ]
}